import mongoose from "mongoose";

const Schema = mongoose.Schema;

// Subdocumento para configura√ß√£o de n√≠veis
const NivelSchema = new Schema({
  ordem: {
    type: Number,
    required: [true, "A ordem do n√≠vel √© obrigat√≥ria"],
    min: [1, "A ordem m√≠nima √© 1"],
  },
  segundos: {
    type: Number,
    required: [true, "A dura√ß√£o em segundos √© obrigat√≥ria"],
    min: [5, "O tempo m√≠nimo por n√≠vel √© 5 segundos"],
    max: [300, "O tempo m√°ximo por n√≠vel √© 300 segundos (5 minutos)"],
  },
});

// Subdocumento para resultados da AI
const ResultadoAISchema = new Schema({
  texto: {
    type: String,
    required: [true, "O texto gerado pela AI √© obrigat√≥rio"],
  },
  participante: {
    type: Schema.Types.ObjectId,
    ref: "User",
    required: [true, "O participante relacionado √© obrigat√≥rio"],
  },
  timestamp: {
    type: Date,
    default: Date.now,
  },
  nivel: {
    type: Number,
    required: [true, "O n√≠vel associado √© obrigat√≥rio"],
  },
});

// Schema principal da sess√£o
const SessaoSchema = new Schema(
  {
    tema: {
      type: String,
      required: [true, "O tema da sess√£o √© obrigat√≥rio"],
      trim: true,
      maxlength: [120, "O tema n√£o pode exceder 120 caracteres"],
    },

    codigoSala: {
      type: String,
      required: [true, "O c√≥digo da sala √© obrigat√≥rio"],
      unique: {
        message: "Este c√≥digo j√° est√° em uso",
      },
      trim: true,
      validate: {
        validator: (v) => /^[A-Z0-9-]{6,20}$/.test(v),
        message:
          "Formato inv√°lido! Use apenas letras mai√∫sculas, n√∫meros e h√≠fens",
      },
    },
    host: {
      type: Schema.Types.ObjectId,
      ref: "User",
      required: [true, "O host da sess√£o √© obrigat√≥rio"],
    },
    participantes: {
      type: [{
        type: Schema.Types.ObjectId,
        ref: "User"
      }],
      validate: {
        validator: function(participantes) {
          return participantes.length <= 50;
        },
        message: "M√°ximo de 50 participantes por sess√£o"
      }
    },
    ideias: [
      {
        type: Schema.Types.ObjectId,
        ref: "Ideia",
      },
    ],
    configuracaoNiveis: {
      type: [NivelSchema],
      required: [true, "A configura√ß√£o de n√≠veis √© obrigat√≥ria"],
      validate: {
        validator: function (niveis) {
          const ordens = niveis.map((n) => n.ordem);
          return new Set(ordens).size === ordens.length; // Verifica ordens √∫nicas
        },
        message: "N√≠veis devem ter ordens √∫nicas",
      },
    },
    status: {
      type: String,
      enum: {
        values: ["aguardando_inicio", "ativa", "pausada", "concluida"],
        message: "Status inv√°lido",
      },
      default: "aguardando_inicio",
    },
    resultadosAI: {
      type: [ResultadoAISchema],
      select: false, // üëà N√£o retornar por padr√£o em queries
    },
    salaProtegida: {
      type: Boolean,
      default: false,
    },
    senhaSala: {
      type: String,
      validate: {
        validator: function (senha) {
          if (!this.salaProtegida) return true;
          return senha && senha.length >= 6;
        },
        message: "Senha deve ter pelo menos 6 caracteres para salas protegidas",
      },
    },
    historicoAcoes: {
      type: [
        {
          tipo: {
            type: String,
            enum: ["pausa", "reinicio", "expulsao"],
          },
          executadoPor: {
            type: Schema.Types.ObjectId,
            ref: "User",
          },
          timestamp: {
            type: Date,
            default: Date.now,
          },
          detalhes: String,
        },
      ],
      select: false,
    },
  },
  {
    timestamps: true,
    toJSON: { virtuals: true },
    toObject: { virtuals: true },
  }
);

SessaoSchema.virtual("tempoTotalEstimado").get(function () {
  return this.configuracaoNiveis.reduce(
    (acc, nivel) => acc + nivel.segundos,
    0
  );
});

export default mongoose.model("Sessao", SessaoSchema);
