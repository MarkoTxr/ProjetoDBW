<!DOCTYPE html>
<html lang="pt">
  <head>
    <%- include('../partials/head') %>
  </head>
  <body>
    <%- include('../partials/header') %>

    <div class="container main-content">
      <div class="row mb-4">
        <div class="col">
          <h1 class="text-center">Participar da Sessão</h1>
        </div>
      </div>

      <div class="row">
        <div class="col-md-10 offset-md-1">
          <div class="card bg-dark">
            <div
              class="card-header d-flex justify-content-between align-items-center"
            >
              <h5 class="mb-0 text-bright"><%= sessao.tema %></h5>
              <span
                class="badge <%= sessao.status === 'ativa' ? 'bg-success' : sessao.status === 'pausada' ? 'bg-warning' : sessao.status === 'concluida' ? 'bg-danger' : 'bg-secondary' %>"
              >
                <%= sessao.status === 'ativa' ? 'Ativa' : sessao.status ===
                'pausada' ? 'Pausada' : sessao.status === 'concluida' ?
                'Concluída' : 'Aguardando Início' %>
              </span>
            </div>
            <div class="card-body">
              <!-- Área de Participação -->
              <div id="participacaoArea">
                <div class="mb-4 text-bright">
                  <h5>Instruções</h5>
                  <p>
                    Aguarde o host iniciar a sessão. Quando a sessão estiver
                    ativa, você poderá submeter suas ideias para cada nível.
                  </p>
                </div>

                <div class="mb-4 text-bright">
                  <h5>Participantes</h5>
                  <div class="row" id="participantes-container">
                    <% sessao.participantes.forEach(participante => { %>
                    <div
                      class="col-md-3 mb-2"
                      id="participante-<%= participante._id %>"
                    >
                      <div class="d-flex align-items-center">
                        <img
                          src="<%= participante.imagemPerfil || '/images/default-profile.png' %>"
                          alt="<%= participante.nick || participante.nome %>"
                          class="rounded-circle me-2"
                          width="30"
                          height="30"
                        />
                        <span
                          ><%= participante.nick || participante.nome %></span
                        >
                      </div>
                    </div>
                    <% }) %>
                  </div>
                </div>

                <% if (sessao.status === 'aguardando_inicio') { %>
                <div class="alert alert-info">
                  <strong>Aguardando início da sessão...</strong>
                  <% if (isHost) { %>
                  <div class="mt-2">
                    <button id="iniciarSessaoBtn" class="btn btn-success">
                      Iniciar Sessão
                    </button>
                  </div>
                  <% } %>
                </div>
                <% } else if (sessao.status === 'pausada') { %>
                <div class="alert alert-warning">
                  <strong>Sessão pausada pelo host</strong>
                  <% if (isHost) { %>
                  <div class="mt-2">
                    <button id="continuarSessaoBtn" class="btn btn-success">
                      Continuar Sessão
                    </button>
                  </div>
                  <% } %>
                </div>
                <% } else if (sessao.status === 'ativa') { %>
                <div id="nivelAtivo" class="mb-4 text-bright">
                  <h5>Nível Atual: <span id="nivelAtualNum">1</span></h5>
                  <div class="progress mb-2">
                    <div
                      id="progressBar"
                      class="progress-bar progress-bar-striped progress-bar-animated"
                      role="progressbar"
                      style="width: 100%"
                    ></div>
                  </div>
                  <p>
                    Tempo restante: <span id="tempoRestante">60</span> segundos
                  </p>
                </div>

                <div id="submissaoArea" class="mb-4 text-bright">
                  <h5>Submeta suas ideias</h5>
                  <form id="formSubmeterPalavras">
                    <div class="mb-3">
                      <textarea
                        class="form-control"
                        id="palavrasInput"
                        rows="3"
                        placeholder="Digite suas ideias separadas por vírgula"
                      ></textarea>
                    </div>
                    <button type="submit" class="btn btn-custom">
                      Submeter Ideias
                    </button>
                  </form>
                </div>

                <% if (isHost) { %>
                <div class="mt-4 d-flex justify-content-between">
                  <button id="pausarSessaoBtn" class="btn btn-warning">
                    Pausar Sessão
                  </button>
                  <button id="concluirSessaoBtn" class="btn btn-danger">
                    Concluir Sessão
                  </button>
                </div>
                <% } %> <% } else if (sessao.status === 'concluida') { %>
                <div class="alert alert-danger">
                  <strong>Esta sessão foi concluída</strong>
                </div>
                <% } %>
              </div>
            </div>
            <div class="card-footer">
              <a href="/sessoes/<%= sessao._id %>" class="btn btn-secondary"
                >Voltar para Detalhes</a
              >
            </div>
          </div>
        </div>
      </div>
    </div>


    <script src="/js/socket.io.js"></script>
    <script>
  document.addEventListener('DOMContentLoaded', function() {
    // Variáveis para controle da sessão
    const sessaoId = '<%= sessao._id %>';
    const isHost = <%= isHost %>;
    
    // Inicializar uma única instância do socket com logs detalhados
    console.log("Tentando conectar ao socket.io...");
    
    // Adicionar listeners para eventos de conexão
    const socket = io({
      transports: ['websocket', 'polling'],
      reconnection: true,
      reconnectionAttempts: 5,
      reconnectionDelay: 1000
    });
    
    // Eventos de conexão para depuração
    socket.on('connect', () => {
      console.log("Socket conectado com sucesso! ID:", socket.id);
      
      // Teste básico de ping-pong após conexão
      console.log("Enviando ping de teste...");
      socket.emit('ping', { userId: "<%= user._id %>", timestamp: new Date().toISOString() });
    });
    
    socket.on('connect_error', (error) => {
      console.error("Erro de conexão socket:", error);
    });
    
    socket.on('connect_timeout', () => {
      console.error("Timeout na conexão socket");
    });
    
    socket.on('reconnect', (attemptNumber) => {
      console.log("Reconectado ao socket após", attemptNumber, "tentativas");
    });
    
    socket.on('reconnect_error', (error) => {
      console.error("Erro na reconexão:", error);
    });
    
    socket.on('pong', (data) => {
      console.log("Pong recebido do servidor:", data);
    });
    
    console.log("Socket inicializado, aguardando conexão...");
    
    // Após confirmar conexão básica, tentar entrar na sala
    socket.on('connect', () => {
      // Entrar na sala da sessão
      console.log("Enviando evento entrarSessao para sessão:", "<%= sessao._id %>");
      socket.emit("entrarSessao", { sessaoId: "<%= sessao._id %>" });

    });
    
    // Atualizar lista de participantes
    socket.on("atualizarParticipantes", ({ participantes }) => {
      console.log("Recebido evento atualizarParticipantes:", participantes);
      const container = document.getElementById("participantes-container");
      container.innerHTML = participantes.map(participante => `
        <div class="col-md-3 mb-2" id="participante-${participante._id}">
          <div class="d-flex align-items-center">
            <img src="${participante.imagemPerfil || '/images/default-profile.png'}" 
                 alt="${participante.nick || participante.nome}" 
                 class="rounded-circle me-2" width="30" height="30">
            <span>${participante.nick || participante.nome}</span>
          </div>
        </div>
      `).join("");
    });

    // Lidar com expulsão de participantes
    socket.on("participanteExpulso", ({ participanteId }) => {
      console.log("Recebido evento participanteExpulso:", participanteId);
      const elemento = document.getElementById(`participante-${participanteId}`);
      if (elemento) elemento.remove();
    });

    // Atualizar status da sessão
    socket.on("atualizarStatus", ({ novoStatus }) => {
      console.log("Recebido evento atualizarStatus:", novoStatus);
      location.reload(); // Recarrega a página para atualizar a UI completa
    });
    
    // Eventos de sessão
    socket.on("sessaoIniciada", ({ nivelAtual, tempoRestante }) => {
      console.log("Recebido evento sessaoIniciada:", { nivelAtual, tempoRestante });
      location.reload(); // Recarregar para mostrar a interface de sessão ativa
    });
    
    socket.on("sessaoPausada", ({ mensagem }) => {
      console.log("Recebido evento sessaoPausada:", mensagem);
      location.reload();
    });
    
    socket.on("sessaoConcluida", ({ mensagem }) => {
      console.log("Recebido evento sessaoConcluida:", mensagem);
      location.reload();
    });
    
    socket.on("tempoAtualizado", ({ nivel, tempoRestante }) => {
      console.log("Recebido evento tempoAtualizado:", { nivel, tempoRestante });
      const tempoRestanteEl = document.getElementById('tempoRestante');
      const progressBar = document.getElementById('progressBar');
      
      if (tempoRestanteEl) {
        tempoRestanteEl.textContent = tempoRestante;
      }
      
      if (progressBar) {
        // Assumindo que o tempo máximo é 60 segundos (ajustar conforme necessário)
        const tempoMaximo = 60; 
        progressBar.style.width = (tempoRestante / tempoMaximo * 100) + '%';
      }
    });
    
    socket.on("erro", ({ mensagem }) => {
      console.error("Erro recebido do servidor:", mensagem);
      alert("Erro: " + mensagem);
    });

    // Botões de controle (apenas para o host)
    if (isHost) {
      const iniciarBtn = document.getElementById('iniciarSessaoBtn');
      const continuarBtn = document.getElementById('continuarSessaoBtn');
      const pausarBtn = document.getElementById('pausarSessaoBtn');
      const concluirBtn = document.getElementById('concluirSessaoBtn');

      if (iniciarBtn) {
        iniciarBtn.addEventListener('click', function() {
          console.log("Botão iniciar clicado, emitindo evento iniciarSessao");
          socket.emit("iniciarSessao", { sessaoId });
        });
      }

      if (continuarBtn) {
        continuarBtn.addEventListener('click', function() {
          console.log("Botão continuar clicado, emitindo evento iniciarSessao");
          socket.emit("iniciarSessao", { sessaoId });
        });
      }

      if (pausarBtn) {
        pausarBtn.addEventListener('click', function() {
          console.log("Botão pausar clicado, emitindo evento pausarSessao");
          socket.emit("pausarSessao", { sessaoId });
        });
      }

      if (concluirBtn) {
        concluirBtn.addEventListener('click', function() {
          if (confirm('Tem certeza que deseja concluir esta sessão? Esta ação não pode ser desfeita.')) {
            console.log("Botão concluir clicado, emitindo evento concluirSessao");
            socket.emit("concluirSessao", { sessaoId });
          }
        });
      }
    }
    // Formulário de submissão de palavras
    const formSubmeterPalavras = document.getElementById('formSubmeterPalavras');
    if (formSubmeterPalavras) {
      formSubmeterPalavras.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const palavrasInput = document.getElementById('palavrasInput');
        const palavras = palavrasInput.value.split(',').map(p => p.trim()).filter(p => p);

        if (palavras.length === 0) {
          alert('Por favor, digite pelo menos uma ideia.');
          return;
        }
        
        // Usar socket para submeter palavras em vez de fetch
        console.log("Submetendo palavras via socket:", palavras);
        socket.emit("submeterPalavra", {
          sessaoId,
          nivel: 1, // Nível atual
          palavra: palavras.join(', ') // Enviar todas as palavras como uma única string
        });
        
        // Limpar o campo após submissão
        palavrasInput.value = '';
      });
    }
    
    // Ouvir confirmação de palavra aceita
    socket.on("palavraAceite", ({ palavra, nivel }) => {
      console.log("Palavra aceita:", palavra, "no nível", nivel);
      // Opcional: mostrar feedback visual de sucesso
    });
    
    // Ouvir atualização de ranking
    socket.on("rankingAtualizado", ({ ranking }) => {
      console.log("Ranking atualizado:", ranking);
      // Implementar atualização visual do ranking se necessário
    });
  });
</script>

    <%- include('../partials/footer') %>
  </body>
</html>
