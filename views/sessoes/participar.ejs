<!DOCTYPE html>
<html lang="pt">
  <head>
    <%- include('../partials/head') %>
  </head>
  <body>
    <%- include('../partials/header') %>

    <div class="container main-content">
      <div class="row mb-4">
        <div class="col">
          <h1 class="text-center">Participar da Sessão</h1>
        </div>
      </div>

      <div class="row">
        <div class="col-md-10 offset-md-1">
          <div class="card bg-dark">
            <div
              class="card-header d-flex justify-content-between align-items-center"
            >
              <h5 class="mb-0 text-bright"><%= sessao.tema %></h5>
              <span
                class="badge <%= sessao.status === 'ativa' ? 'bg-success' : sessao.status === 'pausada' ? 'bg-warning' : sessao.status === 'concluida' ? 'bg-danger' : 'bg-secondary' %>"
                id="status-badge"
              >
                <%= sessao.status === 'ativa' ? 'Ativa' : sessao.status ===
                'pausada' ? 'Pausada' : sessao.status === 'concluida' ?
                'Concluída' : 'Aguardando Início' %>
              </span>
            </div>
            <div class="card-body">
              <!-- Área de Participação -->
              <div id="participacaoArea">
                <div class="mb-4 text-bright">
                  <h5>Instruções</h5>
                  <p>
                    Aguarde o host iniciar a sessão. Quando a sessão estiver
                    ativa, você poderá submeter suas ideias para cada nível.
                  </p>
                </div>

                <div class="mb-4 text-bright">
                  <h5>Participantes</h5>
                  <div class="row" id="participantes-container">
                    <% sessao.participantes.forEach(participante => { %>
                    <div
                      class="col-md-3 mb-2"
                      id="participante-<%= participante._id %>"
                    >
                      <div class="d-flex align-items-center">
                        <img
                          src="<%= participante.imagemPerfil || '/images/default-profile.png' %>"
                          alt="<%= participante.nick || participante.nome %>"
                          class="rounded-circle me-2"
                          width="30"
                          height="30"
                        />
                        <span
                          ><%= participante.nick || participante.nome %></span
                        >
                      </div>
                    </div>
                    <% }) %>
                  </div>
                </div>

                <div id="status-area">
                  <% if (sessao.status === 'aguardando_inicio') { %>
                  <div class="alert alert-info">
                    <strong>Aguardando início da sessão...</strong>
                    <% if (isHost) { %>
                    <div class="mt-4 d-flex justify-content-between">
                      <button id="iniciarSessaoBtn" class="btn btn-success">
                        Iniciar Sessão
                      </button>
                      <button id="concluirSessaoBtn" class="btn btn-danger">
                        Concluir Sessão
                      </button>
                    </div>
                    <% } %>
                  </div>
                  <% } else if (sessao.status === 'pausada') { %>
                  <div class="alert alert-warning">
                    <strong>Sessão pausada pelo host</strong>
                    <% if (isHost) { %>
                    <div class="mt-2">
                      <button id="continuarSessaoBtn" class="btn btn-success">
                        Continuar Sessão
                      </button>
                      <button id="concluirSessaoBtn" class="btn btn-danger">
                        Concluir Sessão
                      </button>
                    </div>
                    <% } %>
                  </div>
                  <% } else if (sessao.status === 'ativa') { %>
                  <div id="nivelAtivo" class="mb-4 text-bright">
                    <h5>Nível Atual: <span id="nivelAtualNum">1</span></h5>
                    <div class="progress mb-2">
                      <div
                        id="progressBar"
                        class="progress-bar progress-bar-striped progress-bar-animated"
                        role="progressbar"
                        style="width: 100%"
                      ></div>
                    </div>
                    <p>
                      Tempo restante:
                      <span id="tempoRestante">60</span> segundos
                    </p>
                  </div>

                  <div id="submissaoArea" class="mb-4 text-bright">
                    <h5>Submeta suas ideias</h5>
                    <form id="formSubmeterPalavras">
                      <div class="mb-3">
                        <textarea
                          class="form-control"
                          id="palavrasInput"
                          rows="3"
                          placeholder="Digite suas ideias separadas por vírgula"
                        ></textarea>
                      </div>
                      <button type="submit" class="btn btn-custom">
                        Submeter Ideias
                      </button>
                    </form>
                  </div>

                  <% if (isHost) { %>
                  <div class="mt-4 d-flex justify-content-between">
                    <button id="pausarSessaoBtn" class="btn btn-warning">
                      Pausar Sessão
                    </button>
                    <button id="concluirSessaoBtn" class="btn btn-danger">
                      Concluir Sessão
                    </button>
                  </div>
                  <% } %> <% } else if (sessao.status === 'concluida') { %>
                  <div class="alert alert-danger">
                    <strong>Esta sessão foi concluída</strong>
                  </div>
                  <% } %>
                </div>
              </div>
            </div>
            <div class="card-footer">
              <a href="/sessoes/<%= sessao._id %>" class="btn btn-secondary"
                >Voltar para Detalhes</a
              >
            </div>
          </div>
        </div>
      </div>
    </div>

    <script src="/js/socket.io.js"></script>
    <script>
          document.addEventListener('DOMContentLoaded', function() {
            // Variáveis para controle da sessão
            const sessaoId = '<%= sessao._id %>';
            const userId = '<%= user._id %>';
            const isHost = <%= isHost %>;

            console.log("Inicializando com sessaoId:", sessaoId);
            console.log("Usuário:", userId);
            console.log("É host:", isHost);

            // Inicializar socket com autenticação
            const socket = io({
              transports: ['websocket', 'polling'],
              reconnection: true,
              reconnectionAttempts: 5,
              reconnectionDelay: 1000,
              auth: {
                userId: userId
              }
            });

            // Eventos de conexão para depuração
            socket.on('connect', () => {
              console.log("Socket conectado com sucesso! ID:", socket.id);

              // Entrar na sala da sessão
              socket.emit("entrarSessao", {
                sessaoId: sessaoId,
                userId: userId
              });

              console.log("Evento entrarSessao emitido para sessão:", sessaoId);
            });

            // Eventos de erro e reconexão
            socket.on('connect_error', (error) => {
              console.error("Erro de conexão socket:", error);
            });

            socket.on('reconnect', (attemptNumber) => {
              console.log("Reconectado ao socket após", attemptNumber, "tentativas");
              // Reentrar na sala após reconexão
              socket.emit("entrarSessao", {
                sessaoId: sessaoId,
                userId: userId
              });
            });

            // Evento de entrada confirmada
            socket.on('entradaConfirmada', (data) => {
              console.log("Entrada na sessão confirmada:", data);
            });

            // Evento de participante entrou
            socket.on('participanteEntrou', (data) => {
              console.log("Novo participante entrou:", data);
              // Não recarregar a página, a lista será atualizada pelo evento atualizarParticipantes
            });

            // Atualizar lista de participantes
            socket.on("atualizarParticipantes", ({ participantes }) => {
              console.log("Recebido evento atualizarParticipantes:", participantes);
              if (!participantes || !Array.isArray(participantes)) {
                console.error("Dados de participantes inválidos:", participantes);
                return;
              }

              const container = document.getElementById("participantes-container");
              if (!container) {
                console.error("Container de participantes não encontrado");
                return;
              }

              // Usar Map para evitar duplicatas
              const participantesMap = new Map();
              participantes.forEach(p => {
                if (p && p._id) {
                  participantesMap.set(p._id.toString(), p);
                }
              });

              // Atualizar apenas os elementos modificados
              container.querySelectorAll("[id^='participante-']").forEach(el => {
                const id = el.id.split("-")[1];
                if (!participantesMap.has(id)) el.remove();
              });

              // Adicionar novos participantes
              participantesMap.forEach((p, id) => {
                if (!document.getElementById(`participante-${id}`)) {
                  const div = document.createElement("div");
                  div.className = "col-md-3 mb-2";
                  div.id = `participante-${id}`;
                  div.innerHTML = `
                    <div class="d-flex align-items-center">
                      <img src="${p.imagemPerfil || '/images/default-profile.png'}"
                           alt="${p.nick || p.nome}"
                           class="rounded-circle me-2" width="30" height="30">
                      <span>${p.nick || p.nome}</span>
                    </div>
                  `;
                  container.appendChild(div);
                }
              });
            });

            // Lidar com expulsão de participantes
            socket.on("participanteExpulso", ({ participanteId }) => {
              console.log("Recebido evento participanteExpulso:", participanteId);
              const elemento = document.getElementById(`participante-${participanteId}`);
              if (elemento) elemento.remove();

              // Se o usuário atual foi expulso
              if (participanteId === userId) {
                alert("Você foi expulso da sessão pelo host");
                window.location.href = "/sessoes";
              }
            });

            // Eventos de mudança de status da sessão
            socket.on("sessaoIniciada", (data) => {
              console.log("Recebido evento sessaoIniciada:", data);
              atualizarStatusUI('ativa');
            });

            socket.on("sessaoPausada", (data) => {
              console.log("Recebido evento sessaoPausada:", data);
              atualizarStatusUI('pausada');
            });

            socket.on("sessaoConcluida", (data) => {
              console.log("Recebido evento sessaoConcluida:", data);
              atualizarStatusUI('concluida');

              // Atualizar resultado da IA
              const resultadoContainer = document.getElementById('resultadoIA-container');
              if (resultadoContainer) {
                resultadoContainer.innerHTML = data.resultadoSessao || 'Nenhuma solução gerada';  // Alterado de data.resultadoIA para data.resultadoSessao
              }

              // Atualizar lista de ideias
              const listaIdeiasContainer = document.getElementById('listaIdeias-container');
              if (listaIdeiasContainer) {
                if (data.ideias && data.ideias.length > 0) {  // Alterado de data.listaIdeias para data.ideias
                  listaIdeiasContainer.innerHTML = data.ideias.map(ideia => `
                    <li class="mb-2">
                      <span class="badge bg-info me-2">${ideia.nick}</span>
                      ${ideia.texto}
                    </li>
                  `).join('');
                } else {
                  listaIdeiasContainer.innerHTML = '<li>Nenhuma ideia foi submetida nesta sessão</li>';
                }
              }
            });
            // Função para atualizar a UI sem recarregar a página
            function atualizarStatusUI(novoStatus) {
              console.log("Atualizando UI para status:", novoStatus);

              // Atualizar badge de status
              const statusBadge = document.getElementById('status-badge');
              if (statusBadge) {
                statusBadge.className = `badge ${
                  novoStatus === 'ativa' ? 'bg-success' :
                  novoStatus === 'pausada' ? 'bg-warning' :
                  novoStatus === 'concluida' ? 'bg-danger' : 'bg-secondary'
                }`;

                statusBadge.textContent =
                  novoStatus === 'ativa' ? 'Ativa' :
                  novoStatus === 'pausada' ? 'Pausada' :
                  novoStatus === 'concluida' ? 'Concluída' : 'Aguardando Início';
              }

              // Atualizar área de status
              const statusArea = document.getElementById('status-area');
              if (statusArea) {
                if (novoStatus === 'aguardando_inicio') {
                  statusArea.innerHTML = `
                    <div class="alert alert-info">
                      <strong>Aguardando início da sessão...</strong>
                      ${isHost ? `
                      <div class="mt-4 d-flex justify-content-between">
                        <button id="iniciarSessaoBtn" class="btn btn-success">
                          Iniciar Sessão
                        </button>
                        <button id="concluirSessaoBtn" class="btn btn-danger">
                          Concluir Sessão
                        </button>
                      </div>
                      ` : ''}
                    </div>
                  `;
                } else if (novoStatus === 'pausada') {
                  statusArea.innerHTML = `
                    <div class="alert alert-warning">
                      <strong>Sessão pausada pelo host</strong>
                      ${isHost ? `
                      <div class="mt-2">
                        <button id="continuarSessaoBtn" class="btn btn-success">
                          Continuar Sessão
                        </button>
                        <button id="concluirSessaoBtn" class="btn btn-danger">
                          Concluir Sessão
                        </button>
                      </div>
                      ` : ''}
                    </div>
                  `;
                } else if (novoStatus === 'ativa') {
                  statusArea.innerHTML = `
                    <div id="nivelAtivo" class="mb-4 text-bright">
                      <h5>Nível Atual: <span id="nivelAtualNum">1</span></h5>
                      <div class="progress mb-2">
                        <div
                          id="progressBar"
                          class="progress-bar progress-bar-striped progress-bar-animated"
                          role="progressbar"
                          style="width: 100%"
                        ></div>
                      </div>
                      <p>
                        Tempo restante: <span id="tempoRestante">60</span> segundos
                      </p>
                    </div>

                    <div id="submissaoArea" class="mb-4 text-bright">
                      <h5>Submeta suas ideias</h5>
                      <form id="formSubmeterPalavras">
                        <div class="mb-3">
                          <textarea
                            class="form-control"
                            id="palavrasInput"
                            rows="3"
                            placeholder="Digite suas ideias separadas por vírgula"
                          ></textarea>
                        </div>
                        <button type="submit" class="btn btn-custom">
                          Submeter Ideias
                        </button>
                      </form>
                    </div>

                    ${isHost ? `
                    <div class="mt-4 d-flex justify-content-between">
                      <button id="pausarSessaoBtn" class="btn btn-warning">
                        Pausar Sessão
                      </button>
                      <button id="concluirSessaoBtn" class="btn btn-danger">
                        Concluir Sessão
                      </button>
                    </div>
                    ` : ''}
                  `;
                } else if (novoStatus === 'concluida') {
                  
                    statusArea.innerHTML = `
                      <div class="alert alert-danger">
                        <strong>Esta sessão foi concluída</strong>
                      </div>
                      <div id="resultadosFinais" class="mt-4 text-light">
                        <div class="mb-4">
                          <h5>Solução Integrada pela IA</h5>
                          <div class="card bg-dark border-primary">
                            <div class="card-body text-light" id="resultadoIA-container">
                              Nenhuma solução gerada
                            </div>
                          </div>
                        </div>
                        <div class="mb-4">
                          <h5>Todas as Ideias Submetidas</h5>
                          <div class="card bg-dark border-secondary">
                            <div class="card-body">
                              <ul id="listaIdeias-container" class="list-unstyled text-light">
                                <li>Nenhuma ideia foi submetida nesta sessão</li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>
                    `;
                  }

                // Reconfigurar os event listeners após atualizar o DOM
                configurarBotoes();
              } else {
                // Se não conseguir atualizar a UI, recarregar a página
                location.reload();
              }
            }

            // Atualizar tempo restante
            socket.on("tempoAtualizado", ({ nivel, tempoRestante }) => {
              console.log("Recebido evento tempoAtualizado:", { nivel, tempoRestante });
              const tempoRestanteEl = document.getElementById('tempoRestante');
              const progressBar = document.getElementById('progressBar');
              const nivelAtualEl = document.getElementById('nivelAtualNum');

              if (nivelAtualEl) {
                nivelAtualEl.textContent = nivel;
              }

              if (tempoRestanteEl) {
                tempoRestanteEl.textContent = tempoRestante;
              }

              if (progressBar) {
                // Assumindo que o tempo máximo é 60 segundos (ajustar conforme necessário)
                const tempoMaximo = 60;
                progressBar.style.width = (tempoRestante / tempoMaximo * 100) + '%';
              }
            });

            // Tratar erros
            socket.on("erro", ({ mensagem }) => {
              console.error("Erro recebido do servidor:", mensagem);
              alert("Erro: " + mensagem);
            });

            // Função para configurar os botões de controle
            function configurarBotoes() {
              if (isHost) {
                const iniciarBtn = document.getElementById('iniciarSessaoBtn');
                const continuarBtn = document.getElementById('continuarSessaoBtn');
                const pausarBtn = document.getElementById('pausarSessaoBtn');
                const concluirBtn = document.getElementById('concluirSessaoBtn');

                if (iniciarBtn) {
                  iniciarBtn.addEventListener('click', function() {
                    console.log("Botão iniciar clicado, emitindo evento iniciarSessao");
                    socket.emit("iniciarSessao", { sessaoId: sessaoId });
                  });
                }

                if (continuarBtn) {
                  continuarBtn.addEventListener('click', function() {
                    console.log("Botão continuar clicado, emitindo evento iniciarSessao");
                    socket.emit("iniciarSessao", { sessaoId: sessaoId });
                  });
                }

                if (pausarBtn) {
                  pausarBtn.addEventListener('click', function() {
                    console.log("Botão pausar clicado, emitindo evento pausarSessao");
                    socket.emit("pausarSessao", { sessaoId: sessaoId });
                  });
                }

                if (concluirBtn) {
                  concluirBtn.addEventListener('click', function() {
                    if (confirm('Tem certeza que deseja concluir esta sessão? Esta ação não pode ser desfeita.')) {
                      console.log("Botão concluir clicado, emitindo evento concluirSessao");
                      socket.emit("concluirSessao", { sessaoId: sessaoId });
                    }
                  });
                }
              }

              // Formulário de submissão de palavras
              const formSubmeterPalavras = document.getElementById('formSubmeterPalavras');
              if (formSubmeterPalavras) {
                formSubmeterPalavras.addEventListener('submit', function(e) {
                  e.preventDefault();
                  const palavrasInput = document.getElementById('palavrasInput');
                  if (!palavrasInput || !palavrasInput.value.trim()) {
                    alert('Por favor, digite pelo menos uma ideia.');
                    return;
                  }

                  const palavras = palavrasInput.value.split(',').map(p => p.trim()).filter(p => p);
                  if (palavras.length === 0) {
                    alert('Por favor, digite pelo menos uma ideia válida.');
                    return;
                  }

                  console.log("Submetendo palavras:", palavras);
                  socket.emit("submeterPalavra", {
                    sessaoId: sessaoId,
                    nivel: parseInt(document.getElementById('nivelAtualNum')?.textContent || '1'),
                    palavra: palavras.join(', ')
                  });

                  palavrasInput.value = '';
                  alert('Ideias submetidas com sucesso!');
                });
              }
            }

            // Configurar botões iniciais
            configurarBotoes();

            // Botão de sair da sessão
            const sairBtn = document.querySelector('a[href="/sessoes/<%= sessao._id %>"]');
            if (sairBtn) {
              sairBtn.addEventListener('click', function(e) {
                e.preventDefault();
                console.log("Botão sair clicado, emitindo evento sairSessao");
                socket.emit("sairSessao", {
                  sessaoId: sessaoId,
                  userId: userId
                });

                // Aguardar confirmação antes de redirecionar
                setTimeout(() => {
                  window.location.href = "/sessoes/<%= sessao._id %>";
                }, 500);
              });
            }
          });
    </script>

    <%- include('../partials/footer') %>
  </body>
</html>
